workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  ENV_FILE: .env

stages:
  - test
  - build
  - deploy

sonarcloud-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    - apk add --no-cache python3
    - python3 --version
    - pip3 --version
#    - apk add py3-pip
    - pip install -r coverage_requirements2.txt
    - export DJANGO_SETTINGS_MODULE=main.settings
    - coverage run --source=. -m pytest
    - coverage report
    - coverage xml -o coverage.xml
    - coverage html
  script:
    - sonar-scanner


build_core_test:
  image: docker:20
  services:
    - name: docker:20-dind
      alias: docker
  stage: build
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
#    - echo "Writing GitLab variables to $ENV_FILE"
#    - |
#      rm -f $ENV_FILE
#      touch $ENV_FILE
#      echo CONSUL_HOST=$CONSUL_HOST >> $ENV_FILE
#      echo CONSUL_TOKEN=$CONSUL_TOKEN >> $ENV_FILE
#      echo SECRET_KEY=$SECRET_KEY >> $ENV_FILE
#      echo CONSUL_PORT=443 >> $ENV_FILE
#    - echo "GitLab variables written to $ENV_FILE"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # - docker build -f docker/Dockerfile -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG -t $CI_REGISTRY_IMAGE:latest .
#    - chmod +x ./set_envirment.sh; ./set_envirment.sh
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY_IMAGE:latest

#release_develop_core_test:
#  stage: release
#  image: docker:20
#  cache: []
#  services:
#    - name: docker:20-dind
#      alias: docker
#  variables:
#    DOCKER_DRIVER: overlay2
#  before_script:
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#  script:
#    - docker tag core-test-django:latest $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#    - docker tag core-test-django:latest $CI_REGISTRY_IMAGE:latest
#    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#    - docker push $CI_REGISTRY_IMAGE:latest

deploy_develop:
  stage: deploy
  image: alpine/curl
  cache: []
  script:
    - curl -X POST -F token=${SPOV_TRIGGER_DEPLOYMENT_TOKEN} -F ref=develop ${SPOV_TRIGGER_DEPLOYMENT_URL}
  only:
    - develop

deploy_latest:
  stage: deploy
  image: alpine/curl
  cache: []
  script:
    - curl -X POST -F token=${SPOV_TRIGGER_DEPLOYMENT_TOKEN} -F ref=develop ${SPOV_TRIGGER_DEPLOYMENT_URL}
  only:
    - tags